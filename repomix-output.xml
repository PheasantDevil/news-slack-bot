This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/
  workflows/
    main.yml
    renovate.yaml
cmd/
  newsbot/
    main.go
internal/
  scraper/
    scraper.go
  slack/
    slack.go
scripts/
  slack-news-drone-ch-post-test.sh
.gitignore
go.mod
README.md
renovate.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/workflows/renovate.yaml">
name: renovate
on:
  workflow_dispatch:
    schedule:
      # JST Runs every Saturday and Sunday at 12:00 p.m.
      - cron: '0 4 ? * 6,7'

env:
  RENOVATE_REPOSITORIES: ${{ github.repository }}
  RENOVATE_USERNAME: ${{ github.repository_owner }}
  RENOVATE_GIT_AUTHOR: 'Renovate Bot <bot@renovateapp.com>'

jobs:
  renovate:
    runs-on: ubuntu-latest

    steps:
      - name: Generate token
        id: get_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.RENOVATE_APP_ID }}
          private_key: ${{ secrets.RENOVATE_ACCESS_TOKEN }}

      - name: Output token
        env:
          TOKEN: ${{ steps.get_token.outputs.token }}
        run: |
          echo "Access Token: ${TOKEN:4}"

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Self-hosted Renovate
        uses: renovatebot/github-action@v41.0.16
        with:
          configurationFile: renovate.json
          token: 'x-access-token:${{ steps.get_token.outputs.token }}'
        env:
          RENOVATE_USERNAME: ${{ env.RENOVATE_USERNAME }}
          RENOVATE_GIT_AUTHOR: ${{ env.RENOVATE_GIT_AUTHOR }}
          RENOVATE_REPOSITORIES: ${{ env.RENOVATE_REPOSITORIES }}
</file>

<file path=".github/workflows/main.yml">
name: Deploy News Bot

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 4 * * *'  # 毎日13時（JST）に実行（UTC 4:00）

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.1

      - name: Run news bot
        env:
          SLACK_WEBHOOK_NEWS_DRONE_JP_CH_URL: ${{ secrets.SLACK_WEBHOOK_NEWS_DRONE_JP_CH_URL }}
        run: go run cmd/newsbot/main.go
</file>

<file path="scripts/slack-news-drone-ch-post-test.sh">
curl -X POST -H 'Content-type: application/json' --data '{"text":"テストメッセージ"}' "$SLACK_WEBHOOK_NEWS_DRONE_JP_CH_URL"
</file>

<file path=".gitignore">
# バイナリ & キャッシュ
bin/
*.log
*.out
*.exe

# 環境変数ファイル
.env

# Goの依存関係
/go/
vendor/
</file>

<file path="go.mod">
module newsbot

go 1.24.1

require github.com/gocolly/colly v1.2.0

require (
	github.com/PuerkitoBio/goquery v1.10.2 // indirect
	github.com/andybalholm/cascadia v1.3.3 // indirect
	github.com/antchfx/htmlquery v1.3.4 // indirect
	github.com/antchfx/xmlquery v1.4.4 // indirect
	github.com/antchfx/xpath v1.3.3 // indirect
	github.com/gobwas/glob v0.2.3 // indirect
	github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect
	github.com/golang/protobuf v1.5.2 // indirect
	github.com/joho/godotenv v1.5.1 // indirect
	github.com/kennygrant/sanitize v1.2.4 // indirect
	github.com/saintfish/chardet v0.0.0-20230101081208-5e3ef4b5456d // indirect
	github.com/temoto/robotstxt v1.1.2 // indirect
	golang.org/x/net v0.37.0 // indirect
	golang.org/x/text v0.23.0 // indirect
	google.golang.org/appengine v1.6.8 // indirect
	google.golang.org/protobuf v1.26.0 // indirect
)
</file>

<file path="README.md">
# News Slack Bot

Scrapes news from drone.jp and posts updates to Slack every 6 hours.
</file>

<file path="renovate.json">
{
  "extends": ["config:recommended", ":timezone(Asia/Tokyo)"],
  "labels": ["dependencies", "renovate"],
  "automerge": true,
  "pin": {
    "automerge": true
  },
  "packageRules": [
    {
      "packagePatterns": ["^@types/"],
      "automerge": true,
      "major": {
        "automerge": false
      }
    },
    {
      "groupName": "jest",
      "automerge": true,
      "sourceUrlPrefixes": [
        "https://github.com/facebook/jest",
        "https://github.com/kulshekhar/ts-jest"
      ]
    },
    {
      "groupName": "linters",
      "automerge": true,
      "extends": ["packages:linters"],
      "packageNames": ["prettier"],
      "packagePatterns": ["^@typescript-eslint/"]
    },
    {
      "matchDepTypes": ["githubActionsForWorkflows"],
      "groupName": "actions for github actions workflows",
      "automerge": true,
      "groupSlug": "actions-update-for-github-actions-workflows"
    },
    {
      "matchDepTypes": ["dockerImageForWorkflows"],
      "groupName": "docker image for github actions workflows",
      "automerge": true,
      "groupSlug": "docker-image-update-for-github-actions-workflows"
    },
    {
      "matchUpdateTypes": ["minor", "patch"],
      "automerge": true,
      "automergeType": "pr",
      "prConcurrentLimit": 10,
      "prPriority": -1,
      "matchPackageNames": [
        "!/@*/",
        "!/some-risky-package/",
        "!/another-risky-package/"
      ]
    },
    {
      "matchUpdateTypes": ["major"],
      "automerge": false,
      "prConcurrentLimit": 5,
      "prPriority": 1
    }
  ],
  "prConcurrentLimit": 10
}
</file>

<file path="cmd/newsbot/main.go">
package main

import (
	"fmt"
	"log"
	"os"
	"time"

	"newsbot/internal/scraper"
	"newsbot/internal/slack"
)

func main() {
	// Slack Webhook URLを取得
	webhookURL := os.Getenv("SLACK_WEBHOOK_NEWS_DRONE_JP_CH_URL")
	if webhookURL == "" {
		log.Fatal("Error: SLACK_WEBHOOK_NEWS_DRONE_JP_CH_URL is not set")
	}

	// 現在の日付を取得
	now := time.Now()
	fmt.Printf("Fetching news articles for %s...\n", now.Format("2006-01-02"))

	// 記事を取得（当日の記事のみ）
	articles, err := scraper.FetchNews("https://www.drone.jp/", now)
	if err != nil {
		log.Fatalf("Failed to fetch news: %v", err)
	}

	// 記事数をログ出力
	if len(articles) == 0 {
		log.Println("No articles found for today!")
		return
	}
	log.Printf("Found %d articles for today\n", len(articles))

	// Slackに投稿
	if err := slack.PostArticlesToSlack(webhookURL, articles); err != nil {
		log.Fatalf("Failed to post to Slack: %v", err)
	}

	fmt.Println("News posted to Slack successfully!")
}
</file>

<file path="internal/scraper/scraper.go">
package scraper

import (
	"fmt"
	"io"
	"net/http"
	"strings"
	"time"

	"github.com/PuerkitoBio/goquery"
)

type Article struct {
	Title     string
	URL       string
	Summary   string
	Thumbnail string
	PostDate  time.Time
}

// FetchNews スクレイピング処理
func FetchNews(url string, targetDate time.Time) ([]Article, error) {
	// 🔥 ステップ1: HTTPリクエストの送信
	fmt.Println("Fetching URL:", url)

	// User-Agent を設定してリクエスト
	client := &http.Client{}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("failed to create request: %v", err)
	}
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64)")

	resp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch page: %v", err)
	}
	defer resp.Body.Close()

	// 🔥 ステップ2: HTTP ステータスコードを確認
	fmt.Println("Response Status:", resp.Status)
	fmt.Println("Final URL after request:", resp.Request.URL.String())

	if resp.StatusCode != 200 {
		return nil, fmt.Errorf("failed to fetch page, status code: %d", resp.StatusCode)
	}

	// 🔥 ステップ3: HTML を goquery に渡す前に出力
	htmlBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read response body: %v", err)
	}

	// 取得したHTMLを表示
	htmlText := string(htmlBytes)
	fmt.Println("Fetched HTML content (first 500 chars):", htmlText[:min(500, len(htmlText))])

	// goquery に渡すために新しい Reader を作成
	doc, err := goquery.NewDocumentFromReader(strings.NewReader(htmlText))
	if err != nil {
		return nil, fmt.Errorf("failed to parse HTML: %v", err)
	}
	fmt.Println("HTML parsed successfully!")

	// 🔥 ステップ4: 記事を取得
	articles := []Article{}
	doc.Find(".p-wrap").Each(func(i int, s *goquery.Selection) {
		// デバッグ: 各記事のHTML構造を出力
		html, _ := s.Html()
		fmt.Printf("Article HTML structure:\n%s\n", html)

		title := s.Find("h3.entry-title a").Text()
		url, exists := s.Find("h3.entry-title a").Attr("href")
		if !exists {
			fmt.Printf("Warning: URL not found for article %d\n", i)
		}
		summary := s.Find(".entry-summary").Text()
		thumbnail, _ := s.Find("img.featured-img").Attr("src")

		// 日付を取得してパース
		dateStr := s.Find("time.date.published").AttrOr("datetime", "")
		postDate, err := time.Parse("2006-01-02T15:04:05-07:00", dateStr)
		if err != nil {
			fmt.Printf("Warning: Failed to parse date for article %d: %v\n", i, err)
			return
		}

		// 指定された日付と同じ日の記事のみを追加
		if isSameDate(postDate, targetDate) {
			fmt.Printf("Found article %d:\nTitle: %s\nURL: %s\nSummary: %s\nThumbnail: %s\nDate: %s\n\n",
				i, title, url, summary, thumbnail, postDate.Format("2006-01-02"))

			if title != "" {
				articles = append(articles, Article{
					Title:     strings.TrimSpace(title),
					URL:       url,
					Summary:   strings.TrimSpace(summary),
					Thumbnail: thumbnail,
					PostDate:  postDate,
				})
			}
		}
	})

	fmt.Printf("Total articles found: %d\n", len(articles))
	if len(articles) == 0 {
		// デバッグ: 全体のHTML構造を確認
		fmt.Println("\nFull HTML structure:")
		doc.Find("body").Each(func(i int, s *goquery.Selection) {
			html, _ := s.Html()
			fmt.Printf("%s\n", html)
		})
	}

	return articles, nil
}

// isSameDate 2つの時刻が同じ日付かどうかを判定
func isSameDate(t1, t2 time.Time) bool {
	y1, m1, d1 := t1.Date()
	y2, m2, d2 := t2.Date()
	return y1 == y2 && m1 == m2 && d1 == d2
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
</file>

<file path="internal/slack/slack.go">
package slack

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"newsbot/internal/scraper"
	"strings"
)

type SlackMessage struct {
	Text string `json:"text"`
}

func SendToSlack(webhookURL string, message string) error {
	payload, err := json.Marshal(SlackMessage{Text: message})
	if err != nil {
		return fmt.Errorf("error marshalling JSON: %v", err)
	}

	resp, err := http.Post(webhookURL, "application/json", bytes.NewBuffer(payload))
	if err != nil {
		return fmt.Errorf("error sending Slack message: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		return fmt.Errorf("error: received non-200 response code: %d", resp.StatusCode)
	}

	log.Println("Slack message sent successfully!")
	return nil
}

// PostArticlesToSlack 記事をSlackに投稿
func PostArticlesToSlack(webhookURL string, articles []scraper.Article) error {
	if len(articles) == 0 {
		return fmt.Errorf("no articles to post")
	}

	// 各記事を個別に投稿
	for _, article := range articles {
		message := fmt.Sprintf("*%s*\n%s\n%s\n%s",
			article.Title,
			article.URL,
			article.Summary,
			article.Thumbnail)

		if err := SendToSlack(webhookURL, message); err != nil {
			log.Printf("Warning: Failed to post article '%s': %v", article.Title, err)
			continue
		}
	}

	// 記事一覧のサマリーを作成
	var summary strings.Builder
	summary.WriteString("*本日の記事一覧*\n")
	for i, article := range articles {
		summary.WriteString(fmt.Sprintf("%d. <%s|%s>\n", i+1, article.URL, article.Title))
	}

	// サマリーを投稿
	if err := SendToSlack(webhookURL, summary.String()); err != nil {
		return fmt.Errorf("failed to post summary: %v", err)
	}

	return nil
}
</file>

</files>
